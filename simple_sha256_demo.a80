; MinZ generated code
; Generated: 2025-08-07 00:21:16


; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.zvdb-minz.simple_sha256_demo.main
.Users.alice.dev.zvdb-minz.simple_sha256_demo.main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = 0
    LD A, 0
    ; Register 2 already in A
    ; store i, r2
    ; Register 2 already in A
    LD ($F002), A
    ; loop_1:
_Users_alice_dev_zvdb-minz_simple_sha256_demo_main_loop_1:
    ; r3 = load i
    LD A, ($F002)
    LD C, A         ; Store to physical register C
    ; r4 = 64
    LD A, 64
    LD D, A         ; Store to physical register D
    ; r5 = r3 < r4
    LD E, D        ; Load 8-bit value to DE
    LD D, 0        ; Zero extend
    OR A           ; Clear carry
    SBC HL, DE     ; Compare Src1 - Src2
    JP M, _Users_alice_dev_zvdb-minz_simple_sha256_demo_main_lt_true_0
    LD HL, 0       ; False
    JP _Users_alice_dev_zvdb-minz_simple_sha256_demo_main_lt_done_0
_Users_alice_dev_zvdb-minz_simple_sha256_demo_main_lt_true_0:
    LD HL, 1       ; True
_Users_alice_dev_zvdb-minz_simple_sha256_demo_main_lt_done_0:
    ; jump_if_not r5, end_loop_2
    LD A, E
    OR A
    JP Z, _Users_alice_dev_zvdb-minz_simple_sha256_demo_main_end_loop_2
    ; r6 = load i
    LD A, ($F002)
    LD H, A         ; Store to physical register H
    ; r7 = 1
    LD A, 1
    LD L, A         ; Store to physical register L
    ; r8 = r6 + r7
    LD D, H
    LD E, L
    ADD HL, DE
    ; store i, r8
    EXX               ; Switch to shadow registers
    LD A, B'         ; From shadow B'
    EXX               ; Switch back to main registers
    LD ($F002), A
    ; jump loop_1
    JP _Users_alice_dev_zvdb-minz_simple_sha256_demo_main_loop_1
    ; end_loop_2:
_Users_alice_dev_zvdb-minz_simple_sha256_demo_main_end_loop_2:
    ; r9 = 55
    LD A, 55
    EXX               ; Switch to shadow registers
    LD C', A         ; Store to shadow C'
    EXX               ; Switch back to main registers
    ; return r9
    RET

    END main
