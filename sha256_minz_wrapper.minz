// SHA256 MinZ Wrapper - Pure MinZ implementation calling inline assembly
// This demonstrates how to integrate with external assembly code

// Memory-mapped locations (matching our sha256_z80.asm)
const HASH_STATE: u16 = 0x9800;
const MSG_BLOCK: u16 = 0x9820;

// SHA256 system initialization - calls our assembly setup
pub fn init_sha256_system() {
    asm {
        ; Call our assembly initialization
        CALL SETUP_K_CONSTANTS
        CALL SHA256_INIT
    }
}

// Hash a single block (512 bits) - calls our assembly implementation
pub fn hash_block() {
    asm {
        ; Process the message block that's already in MSG_BLOCK
        CALL SHA256_PROCESS_BLOCK
    }
}

// Test with empty string - matches our assembly test function
pub fn test_empty_string() -> u8 {
    asm {
        ; Clear message block
        LD HL, {MSG_BLOCK}
        LD DE, {MSG_BLOCK} + 1  
        LD BC, 63
        LD (HL), 0
        LDIR
        
        ; Add SHA256 padding for empty message
        LD HL, {MSG_BLOCK}
        LD (HL), 0x80  ; First padding bit
        
        ; Message length = 0 at end of block (bytes 56-63)
        LD HL, {MSG_BLOCK} + 56
        LD B, 8
    clear_length:
        LD (HL), 0
        INC HL
        DJNZ clear_length
        
        ; Initialize and hash
        CALL SHA256_INIT
        CALL SHA256_PROCESS_BLOCK
    }
    
    // Check if result matches expected empty string hash
    return verify_empty_string_hash();
}

fn verify_empty_string_hash() -> u8 {
    // Expected SHA256 of empty string (first 8 bytes for quick check)
    // Full hash: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
    
    let expected_start: u32 = 0x4298fce3; // Little-endian of e3b0c442
    let actual: u32;
    
    asm {
        ; Read first 4 bytes of hash result
        LD HL, {HASH_STATE}
        LD E, (HL)
        INC HL
        LD D, (HL) 
        INC HL
        PUSH HL
        EX DE, HL
        EXX
        POP HL
        LD E, (HL)
        INC HL  
        LD D, (HL)
        EX DE, HL
        EXX
        ; HL:HL' now contains first 4 bytes
        ; Store in actual variable (this would need proper handling)
    }
    
    // For now, return success (would need proper comparison)
    return 0;
}

// Main demonstration function
fn main() -> u8 {
    init_sha256_system();
    return test_empty_string();
}