; MinZ generated code
; Generated: 2025-08-06 20:14:54


; Data section
    ORG $F000

.Users.alice.dev.zvdb-minz.zvdb.vectors:
    DS 512
.Users.alice.dev.zvdb-minz.zvdb.count:
    DB 0
.Users.alice.dev.zvdb-minz.zvdb.lut:
    DS 256
str_0:
    DB 27    ; Length
    DB "ZVDB-MinZ Production Ready"
    DB 10
str_1:
    DB 28    ; Length
    DB "=========================="
    DB 10
    DB 10
str_2:
    DB 20    ; Length
    DB "Initializing LUT..."
    DB 10
str_3:
    DB 25    ; Length
    DB "Creating test vectors..."
    DB 10
str_4:
    DB 13    ; Length
    DB "Database has "
str_5:
    DB 10    ; Length
    DB " vectors"
    DB 10
    DB 10
str_6:
    DB 19    ; Length
    DB "Hamming distances:"
    DB 10
str_7:
    DB 12    ; Length
    DB "  V0 vs V1: "
str_8:
    DB 12    ; Length
    DB "  V0 vs V2: "
str_9:
    DB 14    ; Length
    DB 10
    DB "Searching..."
    DB 10
str_10:
    DB 19    ; Length
    DB "Best match: Vector "
str_11:
    DB 9    ; Length
    DB "Hamming: "
str_12:
    DB 28    ; Length
    DB 10
    DB 226
    DB 156
    DB 133
    DB " ZVDB-MinZ Complete!"
    DB 10

; Code section
    ORG $8000

; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.zvdb-minz.zvdb.init_lut
.Users.alice.dev.zvdb-minz.zvdb.init_lut:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r1 = 0
    LD A, 0
    ; Register 1 already in A
    ; r2 = 256
    LD HL, 256
    LD ($F004), HL    ; Virtual register 2 to memory
    ; Initialize loop variable i
    ; for_loop_1:
_Users_alice_dev_zvdb-minz_zvdb_init_lut_for_loop_1:
    ; Check i < end
    LD HL, ($F004)    ; Virtual register 2 from memory
    EX DE, HL
    OR A           ; Clear carry
    SBC HL, DE     ; Compare Src1 - Src2
    JP M, _Users_alice_dev_zvdb-minz_zvdb_init_lut_lt_true_0
    LD HL, 0       ; False
    JP _Users_alice_dev_zvdb-minz_zvdb_init_lut_lt_done_0
_Users_alice_dev_zvdb-minz_zvdb_init_lut_lt_true_0:
    LD HL, 1       ; True
_Users_alice_dev_zvdb-minz_zvdb_init_lut_lt_done_0:
    ; jump_if_not r4, for_end_2
    LD A, C
    OR A
    JP Z, _Users_alice_dev_zvdb-minz_zvdb_init_lut_for_end_2
    ; r6 = load i
    LD HL, ($F000)
    ; store val, r6
    LD A, D
    LD ($F00A), A
    ; r8 = 0
    LD A, 0
    EXX               ; Switch to shadow registers
    LD B', A         ; Store to shadow B'
    EXX               ; Switch back to main registers
    ; store bits, r8
    EXX               ; Switch to shadow registers
    LD A, B'         ; From shadow B'
    EXX               ; Switch back to main registers
    LD ($F00E), A
    ; r9 = 0
    LD A, 0
    EXX               ; Switch to shadow registers
    LD D', A         ; Store to shadow D'
    EXX               ; Switch back to main registers
    ; r10 = 8
    LD A, 8
    EXX               ; Switch to shadow registers
    LD E', A         ; Store to shadow E'
    EXX               ; Switch back to main registers
    ; Initialize loop variable b
    ; for_loop_3:
_Users_alice_dev_zvdb-minz_zvdb_init_lut_for_loop_3:
    ; Check b < end
    EXX               ; Switch to shadow registers
    OR A           ; Clear carry
    SBC HL, DE     ; Compare Src1 - Src2
    JP M, _Users_alice_dev_zvdb-minz_zvdb_init_lut_lt_true_1
    LD HL, 0       ; False
    JP _Users_alice_dev_zvdb-minz_zvdb_init_lut_lt_done_1
_Users_alice_dev_zvdb-minz_zvdb_init_lut_lt_true_1:
    LD HL, 1       ; True
_Users_alice_dev_zvdb-minz_zvdb_init_lut_lt_done_1:
    ; jump_if_not r12, for_end_4
    LD A, H
    OR A
    JP Z, _Users_alice_dev_zvdb-minz_zvdb_init_lut_for_end_4
    ; r13 = load val
    LD A, ($F00A)
    LD L, A         ; Store to physical register L
    ; r14 = 1
    LD A, 1
    LD ($F01C), A     ; Virtual register 14 to memory
    ; r15 = load b
    LD HL, ($F000)
    ; r16 = r14 << r15
    ; Shift left
    LD A, ($F01C)     ; Virtual register 14 from memory
    LD B, A       ; B = value to shift
    LD A, H
    LD C, A       ; C = shift count
    LD A, B       ; A = value
    OR A          ; Clear carry
    JR Z, _Users_alice_dev_zvdb-minz_zvdb_init_lut_shl_done_2
    LD B, C       ; B = counter
_Users_alice_dev_zvdb-minz_zvdb_init_lut_shl_loop_2:
    DEC B
    JP M, _Users_alice_dev_zvdb-minz_zvdb_init_lut_shl_done_2
    SLA A         ; Shift left, 0 into bit 0
    JR _Users_alice_dev_zvdb-minz_zvdb_init_lut_shl_loop_2
_Users_alice_dev_zvdb-minz_zvdb_init_lut_shl_done_2:
    LD L, A
    LD H, 0
    ; r17 = r13 & r16
    LD D, H
    LD E, L
    LD A, L
    AND E
    LD L, A
    LD A, H
    AND D
    LD H, A
    LD ($F022), HL    ; Virtual register 17 to memory
    ; r18 = 0
    LD A, 0
    LD H, A         ; Store to physical register H
    ; r19 = r17 != r18
    LD HL, ($F022)    ; Virtual register 17 from memory
    LD E, H        ; Load 8-bit value to DE
    LD D, 0        ; Zero extend
    OR A           ; Clear carry
    SBC HL, DE     ; Compare Src1 - Src2
    JP NZ, _Users_alice_dev_zvdb-minz_zvdb_init_lut_ne_true_3
    LD HL, 0       ; False
    JP _Users_alice_dev_zvdb-minz_zvdb_init_lut_ne_done_3
_Users_alice_dev_zvdb-minz_zvdb_init_lut_ne_true_3:
    LD HL, 1       ; True
_Users_alice_dev_zvdb-minz_zvdb_init_lut_ne_done_3:
    ; jump_if_not r19, else_5
    LD A, L
    OR A
    JP Z, _Users_alice_dev_zvdb-minz_zvdb_init_lut_else_5
    ; r20 = load bits
    LD A, ($F00E)
    LD ($F028), A     ; Virtual register 20 to memory
    ; r21 = 1
    LD A, 1
    LD H, A         ; Store to physical register H
    ; r22 = r20 + r21
    LD HL, ($F028)    ; Virtual register 20 from memory
    LD D, H
    LD E, L
    ADD HL, DE
    ; store bits, r22
    LD A, L
    LD ($F00E), A
    ; jump end_if_6
    JP _Users_alice_dev_zvdb-minz_zvdb_init_lut_end_if_6
    ; else_5:
_Users_alice_dev_zvdb-minz_zvdb_init_lut_else_5:
    ; end_if_6:
_Users_alice_dev_zvdb-minz_zvdb_init_lut_end_if_6:
    ; r23 = 1
    LD A, 1
    LD L, A         ; Store to HL (low byte)
    ; Increment b
    LD D, H
    LD E, L
    ; Register 23 already in HL
    ADD HL, DE
    ; jump for_loop_3
    JP _Users_alice_dev_zvdb-minz_zvdb_init_lut_for_loop_3
    ; for_end_4:
_Users_alice_dev_zvdb-minz_zvdb_init_lut_for_end_4:
    ; r24 = load bits
    LD A, ($F00E)
    LD L, A         ; Store to physical register L
    ; r25 = addr(.Users.alice.dev.zvdb-minz.zvdb.lut)
    LD HL, .Users.alice.dev.zvdb-minz.zvdb.lut
    LD D, H
    LD E, L
    ; r26 = load i
    LD HL, ($F000)
    ; Register 26 already in HL
    ; Calculate array element address
    LD H, D
    LD L, E
    LD D, H
    LD E, L
    ; Register 26 already in HL
    ADD HL, DE
    LD ($F036), HL    ; Virtual register 27 to memory
    ; Store to array[index] (u8)
    LD HL, ($F036)    ; Virtual register 27 from memory
    PUSH HL
    LD A, L
    POP HL
    LD (HL), A
    ; r28 = 1
    LD A, 1
    LD L, A         ; Store to HL (low byte)
    ; Increment i
    LD D, H
    LD E, L
    ; Register 28 already in HL
    ADD HL, DE
    ; jump for_loop_1
    JP _Users_alice_dev_zvdb-minz_zvdb_init_lut_for_loop_1
    ; for_end_2:
_Users_alice_dev_zvdb-minz_zvdb_init_lut_for_end_2:
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.zvdb-minz.zvdb.popcount$u8
.Users.alice.dev.zvdb-minz.zvdb.popcount$u8:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = addr(.Users.alice.dev.zvdb-minz.zvdb.lut)
    LD HL, .Users.alice.dev.zvdb-minz.zvdb.lut
.Users.alice.dev.zvdb-minz.zvdb.popcount$u8_param_val:
    LD HL, #0000   ; SMC parameter val (u8->u16)
    ; Register 3 already in HL
    ; Load array element (u8)
    PUSH HL
    LD A, L
    LD E, A
    LD D, 0
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD H, A         ; Store to physical register H
    ; return r4
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.zvdb-minz.zvdb.hamming_by_index$u8$u8
.Users.alice.dev.zvdb-minz.zvdb.hamming_by_index$u8$u8:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r4 = 0
    LD A, 0
    LD L, A         ; Store to HL (low byte)
    ; store dist, r4
    ; Register 4 already in HL
    LD ($F006), HL
    ; r5 = 0
    LD A, 0
    LD ($F00A), A     ; Virtual register 5 to memory
    ; r6 = 32
    LD A, 32
    LD H, A         ; Store to physical register H
    ; Initialize loop variable i
    LD HL, ($F00A)    ; Virtual register 5 from memory
    ; for_loop_7:
_Users_alice_dev_zvdb-minz_zvdb_hamming_by_index_u8_u8_for_loop_7:
    ; Check i < end
    LD E, H        ; Load 8-bit value to DE
    LD D, 0        ; Zero extend
    OR A           ; Clear carry
    SBC HL, DE     ; Compare Src1 - Src2
    JP M, _Users_alice_dev_zvdb-minz_zvdb_hamming_by_index_u8_u8_lt_true_4
    LD HL, 0       ; False
    JP _Users_alice_dev_zvdb-minz_zvdb_hamming_by_index_u8_u8_lt_done_4
_Users_alice_dev_zvdb-minz_zvdb_hamming_by_index_u8_u8_lt_true_4:
    LD HL, 1       ; True
_Users_alice_dev_zvdb-minz_zvdb_hamming_by_index_u8_u8_lt_done_4:
    ; Register 8 already in HL
    ; jump_if_not r8, for_end_8
    LD A, L
    OR A
    JP Z, _Users_alice_dev_zvdb-minz_zvdb_hamming_by_index_u8_u8_for_end_8
    ; r10 = addr(.Users.alice.dev.zvdb-minz.zvdb.vectors)
    LD HL, .Users.alice.dev.zvdb-minz.zvdb.vectors
    LD B, H
    LD C, L
.Users.alice.dev.zvdb-minz.zvdb.hamming_by_index$u8$u8_param_idx1:
    LD HL, #0000   ; SMC parameter idx1 (u8->u16)
    ; Register 11 already in HL
    ; Load array element (.Users.alice.dev.zvdb-minz.zvdb.Vector256)
    LD H, B
    LD L, C
    PUSH HL
    LD D, H
    LD E, L
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD ($F018), A     ; Virtual register 12 to memory
    ; Load field data (offset 0)
    LD HL, ($F018)    ; Virtual register 12 from memory
    LD E, (HL)
    INC HL
    LD D, (HL)
    EX DE, HL
    PUSH HL           ; Save current HL
    EXX               ; Switch to shadow registers
    POP HL            ; Load into shadow HL
    EXX               ; Switch back to main registers
    ; r14 = load i
    LD HL, ($F000)
    ; Register 14 already in HL
    ; Load array element (u8)
    EXX               ; Switch to shadow registers
    PUSH HL           ; Save shadow HL
    EXX               ; Switch back to main registers
    POP HL            ; Load shadow HL into main HL
    PUSH HL
    LD A, L
    LD E, A
    LD D, 0
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD H, A         ; Store to physical register H
    ; r16 = addr(.Users.alice.dev.zvdb-minz.zvdb.vectors)
    LD HL, .Users.alice.dev.zvdb-minz.zvdb.vectors
    ; Register 16 already in HL
.Users.alice.dev.zvdb-minz.zvdb.hamming_by_index$u8$u8_param_idx2:
    LD DE, #0000   ; SMC parameter idx2 (u8->u16)
    EX DE, HL      ; Move to HL for storage
    ; Register 17 already in HL
    ; Load array element (.Users.alice.dev.zvdb-minz.zvdb.Vector256)
    ; Register 16 already in HL
    PUSH HL
    LD D, H
    LD E, L
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD ($F024), A     ; Virtual register 18 to memory
    ; Load field data (offset 0)
    LD HL, ($F024)    ; Virtual register 18 from memory
    LD E, (HL)
    INC HL
    LD D, (HL)
    EX DE, HL
    LD ($F026), HL    ; Virtual register 19 to memory
    ; r20 = load i
    LD HL, ($F000)
    ; Load array element (u8)
    LD HL, ($F026)    ; Virtual register 19 from memory
    PUSH HL
    LD A, H
    LD E, A
    LD D, 0
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD L, A         ; Store to physical register L
    ; r22 = r15 ^ r21
    LD D, H
    LD E, L
    LD A, L
    XOR E
    LD L, A
    LD A, H
    XOR D
    LD H, A
    ; store xor_val, r22
    LD A, H
    LD ($F012), A
    ; r24 = load xor_val
    LD A, ($F012)
    LD ($F030), A     ; Virtual register 24 to memory
    ; r25 = load xor_val
    LD A, ($F012)
    LD H, A         ; Store to physical register H
    ; r26 = call .Users.alice.dev.zvdb-minz.zvdb.popcount$u8
    ; Call to .Users.alice.dev.zvdb-minz.zvdb.popcount$u8 (args: 1)
    ; Found function, UsesTrueSMC=false
    CALL .Users.alice.dev.zvdb-minz.zvdb.popcount$u8
    ; store pc, r26
    LD A, L
    LD ($F02E), A
    ; r27 = load dist
    LD HL, ($F006)
    ; r28 = load pc
    LD A, ($F02E)
    LD L, A         ; Store to physical register L
    ; r29 = r27 + r28
    LD D, H
    LD E, L
    ADD HL, DE
    ; store dist, r29
    LD ($F006), HL
    ; r30 = 1
    LD A, 1
    LD L, A         ; Store to physical register L
    ; Increment i
    LD D, H
    LD E, L
    ADD HL, DE
    ; jump for_loop_7
    JP _Users_alice_dev_zvdb-minz_zvdb_hamming_by_index_u8_u8_for_loop_7
    ; for_end_8:
_Users_alice_dev_zvdb-minz_zvdb_hamming_by_index_u8_u8_for_end_8:
    ; r31 = load dist
    LD HL, ($F006)
    ; Register 31 already in HL
    ; return r31
    ; Register 31 already in HL
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.zvdb-minz.zvdb.hamming_query$Vector256$u8
.Users.alice.dev.zvdb-minz.zvdb.hamming_query$Vector256$u8:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r4 = 0
    LD A, 0
    LD H, A         ; Store to physical register H
    ; store dist, r4
    LD ($F006), HL
    ; r5 = 0
    LD A, 0
    LD ($F00A), A     ; Virtual register 5 to memory
    ; r6 = 32
    LD A, 32
    LD H, A         ; Store to physical register H
    ; Initialize loop variable i
    LD HL, ($F00A)    ; Virtual register 5 from memory
    ; for_loop_9:
_Users_alice_dev_zvdb-minz_zvdb_hamming_query_Vector256_u8_for_loop_9:
    ; Check i < end
    LD E, H        ; Load 8-bit value to DE
    LD D, 0        ; Zero extend
    OR A           ; Clear carry
    SBC HL, DE     ; Compare Src1 - Src2
    JP M, _Users_alice_dev_zvdb-minz_zvdb_hamming_query_Vector256_u8_lt_true_5
    LD HL, 0       ; False
    JP _Users_alice_dev_zvdb-minz_zvdb_hamming_query_Vector256_u8_lt_done_5
_Users_alice_dev_zvdb-minz_zvdb_hamming_query_Vector256_u8_lt_true_5:
    LD HL, 1       ; True
_Users_alice_dev_zvdb-minz_zvdb_hamming_query_Vector256_u8_lt_done_5:
    ; Register 8 already in HL
    ; jump_if_not r8, for_end_10
    LD A, L
    OR A
    JP Z, _Users_alice_dev_zvdb-minz_zvdb_hamming_query_Vector256_u8_for_end_10
.Users.alice.dev.zvdb-minz.zvdb.hamming_query$Vector256$u8_param_query:
    LD HL, #0000   ; SMC parameter query
    LD ($F014), HL    ; Virtual register 10 to memory
    ; Load field data (offset 0)
    LD HL, ($F014)    ; Virtual register 10 from memory
    LD E, (HL)
    INC HL
    LD D, (HL)
    EX DE, HL
    ; Register 11 already in HL
    ; r12 = load i
    LD HL, ($F000)
    ; Register 12 already in HL
    ; Load array element (u8)
    ; Register 11 already in HL
    PUSH HL
    LD A, L
    LD E, A
    LD D, 0
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD H, A         ; Store to physical register H
    ; r14 = addr(.Users.alice.dev.zvdb-minz.zvdb.vectors)
    LD HL, .Users.alice.dev.zvdb-minz.zvdb.vectors
    ; Register 14 already in HL
.Users.alice.dev.zvdb-minz.zvdb.hamming_query$Vector256$u8_param_idx:
    LD DE, #0000   ; SMC parameter idx (u8->u16)
    EX DE, HL      ; Move to HL for storage
    ; Register 15 already in HL
    ; Load array element (.Users.alice.dev.zvdb-minz.zvdb.Vector256)
    ; Register 14 already in HL
    PUSH HL
    LD D, H
    LD E, L
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD ($F020), A     ; Virtual register 16 to memory
    ; Load field data (offset 0)
    LD HL, ($F020)    ; Virtual register 16 from memory
    LD E, (HL)
    INC HL
    LD D, (HL)
    EX DE, HL
    LD ($F022), HL    ; Virtual register 17 to memory
    ; r18 = load i
    LD HL, ($F000)
    ; Load array element (u8)
    LD HL, ($F022)    ; Virtual register 17 from memory
    PUSH HL
    LD A, H
    LD E, A
    LD D, 0
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD L, A         ; Store to physical register L
    ; r20 = r13 ^ r19
    LD D, H
    LD E, L
    LD A, L
    XOR E
    LD L, A
    LD A, H
    XOR D
    LD H, A
    ; store xor_val, r20
    LD A, H
    LD ($F012), A
    ; r22 = load xor_val
    LD A, ($F012)
    LD ($F02C), A     ; Virtual register 22 to memory
    ; r23 = load xor_val
    LD A, ($F012)
    LD H, A         ; Store to physical register H
    ; r24 = call .Users.alice.dev.zvdb-minz.zvdb.popcount$u8
    ; Call to .Users.alice.dev.zvdb-minz.zvdb.popcount$u8 (args: 1)
    ; Found function, UsesTrueSMC=false
    CALL .Users.alice.dev.zvdb-minz.zvdb.popcount$u8
    ; store pc, r24
    LD A, L
    LD ($F02A), A
    ; r25 = load dist
    LD HL, ($F006)
    ; r26 = load pc
    LD A, ($F02A)
    LD L, A         ; Store to physical register L
    ; r27 = r25 + r26
    LD D, H
    LD E, L
    ADD HL, DE
    ; store dist, r27
    LD ($F006), HL
    ; r28 = 1
    LD A, 1
    LD L, A         ; Store to physical register L
    ; Increment i
    LD D, H
    LD E, L
    ADD HL, DE
    ; jump for_loop_9
    JP _Users_alice_dev_zvdb-minz_zvdb_hamming_query_Vector256_u8_for_loop_9
    ; for_end_10:
_Users_alice_dev_zvdb-minz_zvdb_hamming_query_Vector256_u8_for_end_10:
    ; r29 = load dist
    LD HL, ($F006)
    ; Register 29 already in HL
    ; return r29
    ; Register 29 already in HL
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.zvdb-minz.zvdb.add_vector$Vector256
.Users.alice.dev.zvdb-minz.zvdb.add_vector$Vector256:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = load .Users.alice.dev.zvdb-minz.zvdb.count
    LD HL, ($F020)
    ; r3 = 16
    LD A, 16
    LD L, A         ; Store to physical register L
    ; r4 = r2 >= r3
    LD E, L        ; Load 8-bit value to DE
    LD D, 0        ; Zero extend
    OR A           ; Clear carry
    SBC HL, DE     ; Compare Src1 - Src2
    JP P, _Users_alice_dev_zvdb-minz_zvdb_add_vector_Vector256_ge_true_6
    JP Z, _Users_alice_dev_zvdb-minz_zvdb_add_vector_Vector256_ge_true_6
    LD HL, 0       ; False
    JP _Users_alice_dev_zvdb-minz_zvdb_add_vector_Vector256_ge_done_6
_Users_alice_dev_zvdb-minz_zvdb_add_vector_Vector256_ge_true_6:
    LD HL, 1       ; True
_Users_alice_dev_zvdb-minz_zvdb_add_vector_Vector256_ge_done_6:
    LD ($F008), HL    ; Virtual register 4 to memory
    ; jump_if_not r4, else_11
    LD A, ($F008)     ; Virtual register 4 from memory
    OR A
    JP Z, _Users_alice_dev_zvdb-minz_zvdb_add_vector_Vector256_else_11
    ; r5 = 255
    LD A, 255
    LD H, A         ; Store to physical register H
    ; return r5
    RET
    ; jump end_if_12
    JP _Users_alice_dev_zvdb-minz_zvdb_add_vector_Vector256_end_if_12
    ; else_11:
_Users_alice_dev_zvdb-minz_zvdb_add_vector_Vector256_else_11:
    ; end_if_12:
_Users_alice_dev_zvdb-minz_zvdb_add_vector_Vector256_end_if_12:
    ; r7 = load .Users.alice.dev.zvdb-minz.zvdb.count
    LD HL, ($F020)
    ; store idx, r7
    LD A, L
    LD ($F00C), A
    ; r8 = 0
    LD A, 0
    LD H, A         ; Store to physical register H
    ; r9 = 32
    LD A, 32
    LD L, A         ; Store to physical register L
    ; Initialize loop variable i
    ; Register 10 already in HL
    ; for_loop_13:
_Users_alice_dev_zvdb-minz_zvdb_add_vector_Vector256_for_loop_13:
    ; Check i < end
    ; Register 10 already in HL
    LD E, L        ; Load 8-bit value to DE
    LD D, 0        ; Zero extend
    OR A           ; Clear carry
    SBC HL, DE     ; Compare Src1 - Src2
    JP M, _Users_alice_dev_zvdb-minz_zvdb_add_vector_Vector256_lt_true_7
    LD HL, 0       ; False
    JP _Users_alice_dev_zvdb-minz_zvdb_add_vector_Vector256_lt_done_7
_Users_alice_dev_zvdb-minz_zvdb_add_vector_Vector256_lt_true_7:
    LD HL, 1       ; True
_Users_alice_dev_zvdb-minz_zvdb_add_vector_Vector256_lt_done_7:
    ; jump_if_not r11, for_end_14
    LD A, H
    OR A
    JP Z, _Users_alice_dev_zvdb-minz_zvdb_add_vector_Vector256_for_end_14
.Users.alice.dev.zvdb-minz.zvdb.add_vector$Vector256_param_vec:
    LD HL, #0000   ; SMC parameter vec
    LD ($F018), HL    ; Virtual register 12 to memory
    ; Load field data (offset 0)
    LD HL, ($F018)    ; Virtual register 12 from memory
    LD E, (HL)
    INC HL
    LD D, (HL)
    EX DE, HL
    ; Register 13 already in HL
    ; r14 = load i
    LD HL, ($F000)
    ; Register 14 already in HL
    ; Load array element (u8)
    ; Register 13 already in HL
    PUSH HL
    LD A, L
    LD E, A
    LD D, 0
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD H, A         ; Store to physical register H
    ; r16 = addr(.Users.alice.dev.zvdb-minz.zvdb.vectors)
    LD HL, .Users.alice.dev.zvdb-minz.zvdb.vectors
    ; Register 16 already in HL
    ; r17 = load idx
    LD A, ($F00C)
    LD L, A         ; Store to HL (low byte)
    ; Load array element (.Users.alice.dev.zvdb-minz.zvdb.Vector256)
    ; Register 16 already in HL
    PUSH HL
    LD D, H
    LD E, L
    POP HL
    ADD HL, DE
    LD A, (HL)
    LD L, A         ; Store to HL (low byte)
    ; Load field data (offset 0)
    ; Register 18 already in HL
    LD E, (HL)
    INC HL
    LD D, (HL)
    EX DE, HL
    LD ($F026), HL    ; Virtual register 19 to memory
    ; r20 = load i
    LD HL, ($F000)
    ; Calculate array element address
    LD HL, ($F026)    ; Virtual register 19 from memory
    LD D, H
    LD E, L
    ADD HL, DE
    ; Store to array[index] (u8)
    PUSH HL
    LD A, H
    POP HL
    LD (HL), A
    ; r22 = 1
    LD A, 1
    LD L, A         ; Store to physical register L
    ; Increment i
    ; Register 10 already in HL
    LD D, H
    LD E, L
    ADD HL, DE
    ; Register 10 already in HL
    ; jump for_loop_13
    JP _Users_alice_dev_zvdb-minz_zvdb_add_vector_Vector256_for_loop_13
    ; for_end_14:
_Users_alice_dev_zvdb-minz_zvdb_add_vector_Vector256_for_end_14:
    ; r23 = load .Users.alice.dev.zvdb-minz.zvdb.count
    LD HL, ($F020)
    LD ($F02E), HL    ; Virtual register 23 to memory
    ; r24 = 1
    LD A, 1
    LD H, A         ; Store to physical register H
    ; r25 = r23 + r24
    LD HL, ($F02E)    ; Virtual register 23 from memory
    LD D, H
    LD E, L
    ADD HL, DE
    ; store count, r25
    LD ($F000), HL
    ; r26 = load idx
    LD A, ($F00C)
    LD L, A         ; Store to HL (low byte)
    ; return r26
    ; Register 26 already in HL
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.zvdb-minz.zvdb.find_best$Vector256
.Users.alice.dev.zvdb-minz.zvdb.find_best$Vector256:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r3 = 255
    LD A, 255
    LD H, A         ; Store to physical register H
    ; r4 = load result
    LD HL, ($F004)
    ; Store to field vector_id (offset 0)
    PUSH HL
    POP DE
    LD (DE), L
    INC DE
    LD (DE), H
    ; r5 = 256
    LD HL, 256
    LD ($F00A), HL    ; Virtual register 5 to memory
    ; r6 = load result
    LD HL, ($F004)
    ; Register 6 already in HL
    ; Store to field hamming (offset 1)
    ; Register 6 already in HL
    LD DE, 1
    ADD HL, DE
    PUSH HL
    LD HL, ($F00A)    ; Virtual register 5 from memory
    POP DE
    LD (DE), L
    INC DE
    LD (DE), H
    ; r7 = 256
    LD HL, 256
    LD ($F00E), HL    ; Virtual register 7 to memory
    ; r8 = -r7
    LD HL, ($F00E)    ; Virtual register 7 from memory
    XOR A         ; Clear A
    SUB L         ; 0 - L
    LD L, A
    LD A, 0
    SBC A, H      ; 0 - H with borrow
    LD H, A
    ; r9 = load result
    LD HL, ($F004)
    ; Store to field score (offset 3)
    LD DE, 3
    ADD HL, DE
    PUSH HL
    POP DE
    LD (DE), L
    INC DE
    LD (DE), H
    ; r10 = 0
    LD A, 0
    LD ($F014), A     ; Virtual register 10 to memory
    ; r11 = load .Users.alice.dev.zvdb-minz.zvdb.count
    LD HL, ($F020)
    ; Initialize loop variable i
    LD HL, ($F014)    ; Virtual register 10 from memory
    ; for_loop_15:
_Users_alice_dev_zvdb-minz_zvdb_find_best_Vector256_for_loop_15:
    ; Check i < end
    LD E, H        ; Load 8-bit value to DE
    LD D, 0        ; Zero extend
    OR A           ; Clear carry
    SBC HL, DE     ; Compare Src1 - Src2
    JP M, _Users_alice_dev_zvdb-minz_zvdb_find_best_Vector256_lt_true_8
    LD HL, 0       ; False
    JP _Users_alice_dev_zvdb-minz_zvdb_find_best_Vector256_lt_done_8
_Users_alice_dev_zvdb-minz_zvdb_find_best_Vector256_lt_true_8:
    LD HL, 1       ; True
_Users_alice_dev_zvdb-minz_zvdb_find_best_Vector256_lt_done_8:
    ; Register 13 already in HL
    ; jump_if_not r13, for_end_16
    LD A, L
    OR A
    JP Z, _Users_alice_dev_zvdb-minz_zvdb_find_best_Vector256_for_end_16
.Users.alice.dev.zvdb-minz.zvdb.find_best$Vector256_param_query:
    LD HL, #0000   ; SMC parameter query
    LD ($F01E), HL    ; Virtual register 15 to memory
    ; r16 = load i
    LD HL, ($F000)
    ; Register 16 already in HL
    LD HL, (.Users.alice.dev.zvdb-minz.zvdb.find_best$Vector256_param_query)
    LD ($F022), HL    ; Virtual register 17 to memory
    ; r18 = load i
    LD HL, ($F000)
    ; Register 18 already in HL
    ; r19 = call .Users.alice.dev.zvdb-minz.zvdb.hamming_query$Vector256$u8
    ; Call to .Users.alice.dev.zvdb-minz.zvdb.hamming_query$Vector256$u8 (args: 2)
    ; Found function, UsesTrueSMC=false
    CALL .Users.alice.dev.zvdb-minz.zvdb.hamming_query$Vector256$u8
    ; store dist, r19
    LD ($F01C), HL
    ; r20 = load dist
    LD HL, ($F01C)
    ; Register 20 already in HL
    ; r21 = load result
    LD HL, ($F004)
    ; Load field hamming (offset 1)
    LD DE, 1
    ADD HL, DE
    LD E, (HL)
    INC HL
    LD D, (HL)
    EX DE, HL
    LD ($F02C), HL    ; Virtual register 22 to memory
    ; r23 = r20 < r22
    ; Register 20 already in HL
    LD HL, ($F02C)    ; Virtual register 22 from memory
    EX DE, HL
    OR A           ; Clear carry
    SBC HL, DE     ; Compare Src1 - Src2
    JP M, _Users_alice_dev_zvdb-minz_zvdb_find_best_Vector256_lt_true_9
    LD HL, 0       ; False
    JP _Users_alice_dev_zvdb-minz_zvdb_find_best_Vector256_lt_done_9
_Users_alice_dev_zvdb-minz_zvdb_find_best_Vector256_lt_true_9:
    LD HL, 1       ; True
_Users_alice_dev_zvdb-minz_zvdb_find_best_Vector256_lt_done_9:
    ; Register 23 already in HL
    ; jump_if_not r23, else_17
    LD A, L
    OR A
    JP Z, _Users_alice_dev_zvdb-minz_zvdb_find_best_Vector256_else_17
    ; r24 = load i
    LD HL, ($F000)
    LD ($F030), HL    ; Virtual register 24 to memory
    ; r25 = load result
    LD HL, ($F004)
    ; Store to field vector_id (offset 0)
    PUSH HL
    LD HL, ($F030)    ; Virtual register 24 from memory
    POP DE
    LD (DE), L
    INC DE
    LD (DE), H
    ; r26 = load dist
    LD HL, ($F01C)
    ; r27 = load result
    LD HL, ($F004)
    ; Register 27 already in HL
    ; Store to field hamming (offset 1)
    ; Register 27 already in HL
    LD DE, 1
    ADD HL, DE
    PUSH HL
    POP DE
    LD (DE), L
    INC DE
    LD (DE), H
    ; r29 = load dist
    LD HL, ($F01C)
    ; r30 = 1
    LD A, 1
    LD L, A         ; Store to physical register L
    ; r31 = r29 << r30
    ; 16-bit shift left
    LD A, L
    LD B, A       ; B = shift count
    OR A
    JR Z, .shl16_done_10
_Users_alice_dev_zvdb-minz_zvdb_find_best_Vector256_shl16_loop_10:
    ADD HL, HL    ; Shift left by 1
    DJNZ .shl16_loop_10
_Users_alice_dev_zvdb-minz_zvdb_find_best_Vector256_shl16_done_10:
    LD ($F03E), HL    ; Virtual register 31 to memory
    ; store doubled, r31
    LD HL, ($F03E)    ; Virtual register 31 from memory
    LD ($F038), HL
    ; r32 = 256
    LD HL, 256
    ; Register 32 already in HL
    ; r33 = load doubled
    LD HL, ($F038)
    ; r34 = r32 - r33
    ; Register 32 already in HL
    LD E, H        ; Load 8-bit value to DE
    LD D, 0        ; Zero extend
    OR A          ; Clear carry
    SBC HL, DE    ; HL = Src1 - Src2
    LD ($F044), HL    ; Virtual register 34 to memory
    ; r35 = load result
    LD HL, ($F004)
    ; Register 35 already in HL
    ; Store to field score (offset 3)
    ; Register 35 already in HL
    LD DE, 3
    ADD HL, DE
    PUSH HL
    LD HL, ($F044)    ; Virtual register 34 from memory
    POP DE
    LD (DE), L
    INC DE
    LD (DE), H
    ; jump end_if_18
    JP _Users_alice_dev_zvdb-minz_zvdb_find_best_Vector256_end_if_18
    ; else_17:
_Users_alice_dev_zvdb-minz_zvdb_find_best_Vector256_else_17:
    ; end_if_18:
_Users_alice_dev_zvdb-minz_zvdb_find_best_Vector256_end_if_18:
    ; r36 = 1
    LD A, 1
    LD L, A         ; Store to HL (low byte)
    ; Increment i
    LD D, H
    LD E, L
    ; Register 36 already in HL
    ADD HL, DE
    ; jump for_loop_15
    JP _Users_alice_dev_zvdb-minz_zvdb_find_best_Vector256_for_loop_15
    ; for_end_16:
_Users_alice_dev_zvdb-minz_zvdb_find_best_Vector256_for_end_16:
    ; r37 = load result
    LD HL, ($F004)
    ; return r37
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.zvdb-minz.zvdb.create_tests
.Users.alice.dev.zvdb-minz.zvdb.create_tests:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r2 = 0
    LD A, 0
    LD L, A         ; Store to physical register L
    ; r3 = 32
    LD A, 32
    LD ($F006), A     ; Virtual register 3 to memory
    ; Initialize loop variable i
    ; for_loop_19:
_Users_alice_dev_zvdb-minz_zvdb_create_tests_for_loop_19:
    ; Check i < end
    LD HL, ($F006)    ; Virtual register 3 from memory
    EX DE, HL
    OR A           ; Clear carry
    SBC HL, DE     ; Compare Src1 - Src2
    JP M, _Users_alice_dev_zvdb-minz_zvdb_create_tests_lt_true_11
    LD HL, 0       ; False
    JP _Users_alice_dev_zvdb-minz_zvdb_create_tests_lt_done_11
_Users_alice_dev_zvdb-minz_zvdb_create_tests_lt_true_11:
    LD HL, 1       ; True
_Users_alice_dev_zvdb-minz_zvdb_create_tests_lt_done_11:
    ; jump_if_not r5, for_end_20
    LD A, L
    OR A
    JP Z, _Users_alice_dev_zvdb-minz_zvdb_create_tests_for_end_20
    ; r6 = load i
    LD HL, ($F000)
    LD ($F00C), HL    ; Virtual register 6 to memory
    ; r7 = 1
    LD A, 1
    LD H, A         ; Store to physical register H
    ; r8 = r6 & r7
    LD HL, ($F00C)    ; Virtual register 6 from memory
    LD D, H
    LD E, L
    LD A, L
    AND E
    LD L, A
    LD A, H
    AND D
    LD H, A
    ; r9 = 0
    LD A, 0
    LD ($F012), A     ; Virtual register 9 to memory
    ; r10 = r8 == r9
    LD HL, ($F012)    ; Virtual register 9 from memory
    EX DE, HL
    OR A           ; Clear carry
    SBC HL, DE     ; Compare Src1 - Src2
    JP Z, _Users_alice_dev_zvdb-minz_zvdb_create_tests_eq_true_12
    LD HL, 0       ; False
    JP _Users_alice_dev_zvdb-minz_zvdb_create_tests_eq_done_12
_Users_alice_dev_zvdb-minz_zvdb_create_tests_eq_true_12:
    LD HL, 1       ; True
_Users_alice_dev_zvdb-minz_zvdb_create_tests_eq_done_12:
    ; jump_if_not r10, else_21
    LD A, H
    OR A
    JP Z, _Users_alice_dev_zvdb-minz_zvdb_create_tests_else_21
    ; r11 = 85
    LD A, 85
    LD L, A         ; Store to physical register L
    ; r12 = load vec
    LD HL, ($F002)
    ; Register 12 already in HL
    ; Load field data (offset 0)
    ; Register 12 already in HL
    LD E, (HL)
    INC HL
    LD D, (HL)
    EX DE, HL
    LD ($F01A), HL    ; Virtual register 13 to memory
    ; r14 = load i
    LD HL, ($F000)
    ; Register 14 already in HL
    ; Calculate array element address
    LD HL, ($F01A)    ; Virtual register 13 from memory
    LD D, H
    LD E, L
    ; Register 14 already in HL
    ADD HL, DE
    ; Store to array[index] (u8)
    PUSH HL
    LD A, L
    POP HL
    LD (HL), A
    ; jump end_if_22
    JP _Users_alice_dev_zvdb-minz_zvdb_create_tests_end_if_22
    ; else_21:
_Users_alice_dev_zvdb-minz_zvdb_create_tests_else_21:
    ; r16 = 170
    LD A, 170
    LD L, A         ; Store to physical register L
    ; r17 = load vec
    LD HL, ($F002)
    ; Register 17 already in HL
    ; Load field data (offset 0)
    ; Register 17 already in HL
    LD E, (HL)
    INC HL
    LD D, (HL)
    EX DE, HL
    LD ($F024), HL    ; Virtual register 18 to memory
    ; r19 = load i
    LD HL, ($F000)
    ; Register 19 already in HL
    ; Calculate array element address
    LD HL, ($F024)    ; Virtual register 18 from memory
    LD D, H
    LD E, L
    ; Register 19 already in HL
    ADD HL, DE
    ; Store to array[index] (u8)
    PUSH HL
    LD A, L
    POP HL
    LD (HL), A
    ; end_if_22:
_Users_alice_dev_zvdb-minz_zvdb_create_tests_end_if_22:
    ; r21 = 1
    LD A, 1
    LD L, A         ; Store to physical register L
    ; Increment i
    LD D, H
    LD E, L
    ADD HL, DE
    ; jump for_loop_19
    JP _Users_alice_dev_zvdb-minz_zvdb_create_tests_for_loop_19
    ; for_end_20:
_Users_alice_dev_zvdb-minz_zvdb_create_tests_for_end_20:
    ; r22 = load vec
    LD HL, ($F002)
    LD ($F02C), HL    ; Virtual register 22 to memory
    ; r23 = load vec
    LD HL, ($F002)
    ; r24 = call .Users.alice.dev.zvdb-minz.zvdb.add_vector$Vector256
    ; Call to .Users.alice.dev.zvdb-minz.zvdb.add_vector$Vector256 (args: 1)
    ; Found function, UsesTrueSMC=false
    CALL .Users.alice.dev.zvdb-minz.zvdb.add_vector$Vector256
    ; r25 = 0
    LD A, 0
    LD ($F032), A     ; Virtual register 25 to memory
    ; r26 = 32
    LD A, 32
    LD H, A         ; Store to physical register H
    ; Initialize loop variable i
    LD HL, ($F032)    ; Virtual register 25 from memory
    ; for_loop_23:
_Users_alice_dev_zvdb-minz_zvdb_create_tests_for_loop_23:
    ; Check i < end
    LD E, H        ; Load 8-bit value to DE
    LD D, 0        ; Zero extend
    OR A           ; Clear carry
    SBC HL, DE     ; Compare Src1 - Src2
    JP M, _Users_alice_dev_zvdb-minz_zvdb_create_tests_lt_true_13
    LD HL, 0       ; False
    JP _Users_alice_dev_zvdb-minz_zvdb_create_tests_lt_done_13
_Users_alice_dev_zvdb-minz_zvdb_create_tests_lt_true_13:
    LD HL, 1       ; True
_Users_alice_dev_zvdb-minz_zvdb_create_tests_lt_done_13:
    ; Register 28 already in HL
    ; jump_if_not r28, for_end_24
    LD A, L
    OR A
    JP Z, _Users_alice_dev_zvdb-minz_zvdb_create_tests_for_end_24
    ; r29 = 255
    LD A, 255
    LD H, A         ; Store to physical register H
    ; r30 = load vec
    LD HL, ($F002)
    ; Load field data (offset 0)
    LD E, (HL)
    INC HL
    LD D, (HL)
    EX DE, HL
    LD ($F03E), HL    ; Virtual register 31 to memory
    ; r32 = load i
    LD HL, ($F000)
    ; Register 32 already in HL
    ; Calculate array element address
    LD HL, ($F03E)    ; Virtual register 31 from memory
    LD D, H
    LD E, L
    ; Register 32 already in HL
    ADD HL, DE
    ; Store to array[index] (u8)
    PUSH HL
    LD A, H
    POP HL
    LD (HL), A
    ; r34 = 1
    LD A, 1
    LD L, A         ; Store to physical register L
    ; Increment i
    LD D, H
    LD E, L
    ADD HL, DE
    ; jump for_loop_23
    JP _Users_alice_dev_zvdb-minz_zvdb_create_tests_for_loop_23
    ; for_end_24:
_Users_alice_dev_zvdb-minz_zvdb_create_tests_for_end_24:
    ; r35 = load vec
    LD HL, ($F002)
    LD ($F046), HL    ; Virtual register 35 to memory
    ; r36 = load vec
    LD HL, ($F002)
    ; r37 = call .Users.alice.dev.zvdb-minz.zvdb.add_vector$Vector256
    ; Call to .Users.alice.dev.zvdb-minz.zvdb.add_vector$Vector256 (args: 1)
    ; Found function, UsesTrueSMC=false
    CALL .Users.alice.dev.zvdb-minz.zvdb.add_vector$Vector256
    ; r38 = 0
    LD A, 0
    LD ($F04C), A     ; Virtual register 38 to memory
    ; r39 = 32
    LD A, 32
    LD H, A         ; Store to physical register H
    ; Initialize loop variable i
    LD HL, ($F04C)    ; Virtual register 38 from memory
    ; for_loop_25:
_Users_alice_dev_zvdb-minz_zvdb_create_tests_for_loop_25:
    ; Check i < end
    LD E, H        ; Load 8-bit value to DE
    LD D, 0        ; Zero extend
    OR A           ; Clear carry
    SBC HL, DE     ; Compare Src1 - Src2
    JP M, _Users_alice_dev_zvdb-minz_zvdb_create_tests_lt_true_14
    LD HL, 0       ; False
    JP _Users_alice_dev_zvdb-minz_zvdb_create_tests_lt_done_14
_Users_alice_dev_zvdb-minz_zvdb_create_tests_lt_true_14:
    LD HL, 1       ; True
_Users_alice_dev_zvdb-minz_zvdb_create_tests_lt_done_14:
    ; Register 41 already in HL
    ; jump_if_not r41, for_end_26
    LD A, L
    OR A
    JP Z, _Users_alice_dev_zvdb-minz_zvdb_create_tests_for_end_26
    ; r42 = 0
    LD A, 0
    LD H, A         ; Store to physical register H
    ; r43 = load vec
    LD HL, ($F002)
    ; Load field data (offset 0)
    LD E, (HL)
    INC HL
    LD D, (HL)
    EX DE, HL
    LD ($F058), HL    ; Virtual register 44 to memory
    ; r45 = load i
    LD HL, ($F000)
    ; Register 45 already in HL
    ; Calculate array element address
    LD HL, ($F058)    ; Virtual register 44 from memory
    LD D, H
    LD E, L
    ; Register 45 already in HL
    ADD HL, DE
    ; Store to array[index] (u8)
    PUSH HL
    LD A, H
    POP HL
    LD (HL), A
    ; r47 = 1
    LD A, 1
    LD L, A         ; Store to physical register L
    ; Increment i
    LD D, H
    LD E, L
    ADD HL, DE
    ; jump for_loop_25
    JP _Users_alice_dev_zvdb-minz_zvdb_create_tests_for_loop_25
    ; for_end_26:
_Users_alice_dev_zvdb-minz_zvdb_create_tests_for_end_26:
    ; r48 = load vec
    LD HL, ($F002)
    ; Register 48 already in HL
    ; r49 = load vec
    LD HL, ($F002)
    ; r50 = call .Users.alice.dev.zvdb-minz.zvdb.add_vector$Vector256
    ; Call to .Users.alice.dev.zvdb-minz.zvdb.add_vector$Vector256 (args: 1)
    ; Found function, UsesTrueSMC=false
    CALL .Users.alice.dev.zvdb-minz.zvdb.add_vector$Vector256
    ; return
    RET
; Using hierarchical register allocation (physical → shadow → memory)

; Function: .Users.alice.dev.zvdb-minz.zvdb.main
.Users.alice.dev.zvdb-minz.zvdb.main:
; IsSMCDefault=true, IsSMCEnabled=true
; Using absolute addressing for locals (SMC style)
    ; r1 = string(str_0)
    LD HL, str_0
    LD ($F002), HL    ; Virtual register 1 to memory
    ; Print "ZVDB-MinZ Production Ready
" (27 chars via loop)
    LD HL, ($F002)    ; Virtual register 1 from memory
    CALL print_string
    ; r2 = string(str_1)
    LD HL, str_1
    ; Print "==========================

" (28 chars via loop)
    CALL print_string
    ; r3 = string(str_2)
    LD HL, str_2
    ; Print "Initializing LUT...
" (20 chars via loop)
    CALL print_string
    ; r4 = call .Users.alice.dev.zvdb-minz.zvdb.init_lut
    ; Call to .Users.alice.dev.zvdb-minz.zvdb.init_lut (args: 0)
    ; Found function, UsesTrueSMC=false
    CALL .Users.alice.dev.zvdb-minz.zvdb.init_lut
    LD ($F008), HL    ; Virtual register 4 to memory
    ; r5 = string(str_3)
    LD HL, str_3
    ; Print "Creating test vectors...
" (25 chars via loop)
    CALL print_string
    ; r6 = call .Users.alice.dev.zvdb-minz.zvdb.create_tests
    ; Call to .Users.alice.dev.zvdb-minz.zvdb.create_tests (args: 0)
    ; Found function, UsesTrueSMC=false
    CALL .Users.alice.dev.zvdb-minz.zvdb.create_tests
    ; r7 = string(str_4)
    LD HL, str_4
    LD ($F00E), HL    ; Virtual register 7 to memory
    ; Print "Database has " (13 chars via loop)
    LD HL, ($F00E)    ; Virtual register 7 from memory
    CALL print_string
    ; r8 = string(str_5)
    LD HL, str_5
    ; Print " vectors

" (10 chars via loop)
    CALL print_string
    ; r10 = 0
    LD A, 0
    LD L, A         ; Store to physical register L
    ; r11 = 1
    LD A, 1
    LD ($F016), A     ; Virtual register 11 to memory
    ; r12 = 0
    LD A, 0
    LD H, A         ; Store to physical register H
    ; r13 = 1
    LD A, 1
    LD L, A         ; Store to physical register L
    ; r14 = call .Users.alice.dev.zvdb-minz.zvdb.hamming_by_index$u8$u8
    ; Call to .Users.alice.dev.zvdb-minz.zvdb.hamming_by_index$u8$u8 (args: 2)
    ; Found function, UsesTrueSMC=false
    CALL .Users.alice.dev.zvdb-minz.zvdb.hamming_by_index$u8$u8
    ; Register 14 already in HL
    ; store h01, r14
    ; Register 14 already in HL
    LD ($F012), HL
    ; r16 = 0
    LD A, 0
    LD ($F020), A     ; Virtual register 16 to memory
    ; r17 = 2
    LD A, 2
    LD H, A         ; Store to physical register H
    ; r18 = 0
    LD A, 0
    LD L, A         ; Store to physical register L
    ; r19 = 2
    LD A, 2
    LD L, A         ; Store to HL (low byte)
    ; r20 = call .Users.alice.dev.zvdb-minz.zvdb.hamming_by_index$u8$u8
    ; Call to .Users.alice.dev.zvdb-minz.zvdb.hamming_by_index$u8$u8 (args: 2)
    ; Found function, UsesTrueSMC=false
    CALL .Users.alice.dev.zvdb-minz.zvdb.hamming_by_index$u8$u8
    ; store h02, r20
    LD ($F01E), HL
    ; r21 = string(str_6)
    LD HL, str_6
    LD ($F02A), HL    ; Virtual register 21 to memory
    ; Print "Hamming distances:
" (19 chars via loop)
    LD HL, ($F02A)    ; Virtual register 21 from memory
    CALL print_string
    ; r22 = string(str_7)
    LD HL, str_7
    ; Print "  V0 vs V1: " (12 chars via loop)
    CALL print_string
    ; Direct print " bits
" (6 chars)
    ; Direct print " bits
" (6 chars)
    LD A, 32
    RST 16             ; Print character
    LD A, 98
    RST 16             ; Print character
    LD A, 105
    RST 16             ; Print character
    LD A, 116
    RST 16             ; Print character
    LD A, 115
    RST 16             ; Print character
    LD A, 10
    RST 16             ; Print character
    ; r23 = string(str_8)
    LD HL, str_8
    ; Print "  V0 vs V2: " (12 chars via loop)
    CALL print_string
    ; Direct print " bits
" (6 chars)
    ; Direct print " bits
" (6 chars)
    LD A, 32
    RST 16             ; Print character
    LD A, 98
    RST 16             ; Print character
    LD A, 105
    RST 16             ; Print character
    LD A, 116
    RST 16             ; Print character
    LD A, 115
    RST 16             ; Print character
    LD A, 10
    RST 16             ; Print character
    ; r24 = string(str_9)
    LD HL, str_9
    LD ($F030), HL    ; Virtual register 24 to memory
    ; Print "
Searching...
" (14 chars via loop)
    LD HL, ($F030)    ; Virtual register 24 from memory
    CALL print_string
    ; r26 = 0
    LD A, 0
    LD H, A         ; Store to physical register H
    ; r27 = 32
    LD A, 32
    LD L, A         ; Store to physical register L
    ; Initialize loop variable i
    LD ($F038), HL    ; Virtual register 28 to memory
    ; for_loop_27:
_Users_alice_dev_zvdb-minz_zvdb_main_for_loop_27:
    ; Check i < end
    LD HL, ($F038)    ; Virtual register 28 from memory
    LD E, L        ; Load 8-bit value to DE
    LD D, 0        ; Zero extend
    OR A           ; Clear carry
    SBC HL, DE     ; Compare Src1 - Src2
    JP M, _Users_alice_dev_zvdb-minz_zvdb_main_lt_true_15
    LD HL, 0       ; False
    JP _Users_alice_dev_zvdb-minz_zvdb_main_lt_done_15
_Users_alice_dev_zvdb-minz_zvdb_main_lt_true_15:
    LD HL, 1       ; True
_Users_alice_dev_zvdb-minz_zvdb_main_lt_done_15:
    ; jump_if_not r29, for_end_28
    LD A, H
    OR A
    JP Z, _Users_alice_dev_zvdb-minz_zvdb_main_for_end_28
    ; r30 = load i
    LD HL, ($F000)
    ; r31 = 1
    LD A, 1
    LD ($F03E), A     ; Virtual register 31 to memory
    ; r32 = r30 & r31
    LD D, H
    LD E, L
    LD HL, ($F03E)    ; Virtual register 31 from memory
    LD A, L
    AND E
    LD L, A
    LD A, H
    AND D
    LD H, A
    ; r33 = 0
    LD A, 0
    LD L, A         ; Store to physical register L
    ; r34 = r32 == r33
    LD E, L        ; Load 8-bit value to DE
    LD D, 0        ; Zero extend
    OR A           ; Clear carry
    SBC HL, DE     ; Compare Src1 - Src2
    JP Z, _Users_alice_dev_zvdb-minz_zvdb_main_eq_true_16
    LD HL, 0       ; False
    JP _Users_alice_dev_zvdb-minz_zvdb_main_eq_done_16
_Users_alice_dev_zvdb-minz_zvdb_main_eq_true_16:
    LD HL, 1       ; True
_Users_alice_dev_zvdb-minz_zvdb_main_eq_done_16:
    ; Register 34 already in HL
    ; jump_if_not r34, else_29
    LD A, L
    OR A
    JP Z, _Users_alice_dev_zvdb-minz_zvdb_main_else_29
    ; r35 = 84
    LD A, 84
    LD H, A         ; Store to physical register H
    ; r36 = load query
    LD HL, ($F032)
    ; Load field data (offset 0)
    LD E, (HL)
    INC HL
    LD D, (HL)
    EX DE, HL
    LD ($F04A), HL    ; Virtual register 37 to memory
    ; r38 = load i
    LD HL, ($F000)
    ; Register 38 already in HL
    ; Calculate array element address
    LD HL, ($F04A)    ; Virtual register 37 from memory
    LD D, H
    LD E, L
    ; Register 38 already in HL
    ADD HL, DE
    ; Store to array[index] (u8)
    PUSH HL
    LD A, H
    POP HL
    LD (HL), A
    ; jump end_if_30
    JP _Users_alice_dev_zvdb-minz_zvdb_main_end_if_30
    ; else_29:
_Users_alice_dev_zvdb-minz_zvdb_main_else_29:
    ; r40 = 171
    LD A, 171
    LD L, A         ; Store to physical register L
    ; r41 = load query
    LD HL, ($F032)
    ; Register 41 already in HL
    ; Load field data (offset 0)
    ; Register 41 already in HL
    LD E, (HL)
    INC HL
    LD D, (HL)
    EX DE, HL
    LD ($F054), HL    ; Virtual register 42 to memory
    ; r43 = load i
    LD HL, ($F000)
    ; Register 43 already in HL
    ; Calculate array element address
    LD HL, ($F054)    ; Virtual register 42 from memory
    LD D, H
    LD E, L
    ; Register 43 already in HL
    ADD HL, DE
    ; Store to array[index] (u8)
    PUSH HL
    LD A, L
    POP HL
    LD (HL), A
    ; end_if_30:
_Users_alice_dev_zvdb-minz_zvdb_main_end_if_30:
    ; r45 = 1
    LD A, 1
    LD L, A         ; Store to physical register L
    ; Increment i
    LD HL, ($F038)    ; Virtual register 28 from memory
    LD D, H
    LD E, L
    ADD HL, DE
    LD ($F038), HL    ; Virtual register 28 to memory
    ; jump for_loop_27
    JP _Users_alice_dev_zvdb-minz_zvdb_main_for_loop_27
    ; for_end_28:
_Users_alice_dev_zvdb-minz_zvdb_main_for_end_28:
    ; r47 = load query
    LD HL, ($F032)
    ; r48 = load query
    LD HL, ($F032)
    ; r49 = call .Users.alice.dev.zvdb-minz.zvdb.find_best$Vector256
    ; Call to .Users.alice.dev.zvdb-minz.zvdb.find_best$Vector256 (args: 1)
    ; Found function, UsesTrueSMC=false
    CALL .Users.alice.dev.zvdb-minz.zvdb.find_best$Vector256
    ; Register 49 already in HL
    ; store result, r49
    ; Register 49 already in HL
    LD ($F05C), HL
    ; r50 = string(str_10)
    LD HL, str_10
    ; Register 50 already in HL
    ; Print "Best match: Vector " (19 chars via loop)
    ; Register 50 already in HL
    CALL print_string
    ; Direct print "
" (1 chars)
    ; Direct print "
" (1 chars)
    LD A, 10
    RST 16             ; Print character
    ; r51 = string(str_11)
    LD HL, str_11
    ; Print "Hamming: " (9 chars via loop)
    CALL print_string
    ; Direct print " bits
" (6 chars)
    ; Direct print " bits
" (6 chars)
    LD A, 32
    RST 16             ; Print character
    LD A, 98
    RST 16             ; Print character
    LD A, 105
    RST 16             ; Print character
    LD A, 116
    RST 16             ; Print character
    LD A, 115
    RST 16             ; Print character
    LD A, 10
    RST 16             ; Print character
    ; Direct print "Score: " (7 chars)
    ; Direct print "Score: " (7 chars)
    LD A, 83
    RST 16             ; Print character
    LD A, 99
    RST 16             ; Print character
    LD A, 111
    RST 16             ; Print character
    LD A, 114
    RST 16             ; Print character
    LD A, 101
    RST 16             ; Print character
    LD A, 58
    RST 16             ; Print character
    LD A, 32
    RST 16             ; Print character
    ; Direct print "
" (1 chars)
    ; Direct print "
" (1 chars)
    LD A, 10
    RST 16             ; Print character
    ; r52 = string(str_12)
    LD HL, str_12
    ; Print "
â ZVDB-MinZ Complete!
" (28 chars via loop)
    CALL print_string
    ; return
    RET

; Runtime print helper functions
print_string:
    LD A, (HL)         ; A = first byte
    CP 255             ; Check if extended format marker
    JR Z, print_string_u16
    ; Standard u8 format: [len:u8][data...]
    LD B, A            ; B = length from first byte
    INC HL             ; HL -> string data
    OR A               ; Check if length is zero
    RET Z              ; Return if empty string
print_loop_u8:
    LD A, (HL)         ; Load character
    RST 16             ; Print character
    INC HL             ; Next character
    DJNZ print_loop_u8 ; Decrement B and loop
    RET

print_string_u16:
    ; Extended u16 format: [255][len:u16][data...]
    INC HL             ; Skip 255 marker
    LD E, (HL)         ; E = low byte of length
    INC HL
    LD D, (HL)         ; D = high byte of length
    INC HL             ; HL -> string data
    LD A, D            ; Check if length is zero
    OR E
    RET Z              ; Return if empty string
    ; Use 16-bit counter for large strings
print_loop_u16:
    LD A, (HL)         ; Load character
    RST 16             ; Print character
    INC HL             ; Next character
    DEC DE             ; Decrement 16-bit counter
    LD A, D            ; Check if counter is zero
    OR E
    JR NZ, print_loop_u16
    RET

print_u8_decimal:
    LD H, 0            ; HL = A (zero extend)
    LD L, A
    CALL print_u16_decimal
    RET

print_u16_decimal:
    LD BC, -10000
    LD DE, -1000
    CALL print_digit
    LD BC, -1000
    LD DE, -100
    CALL print_digit
    LD BC, -100
    LD DE, -10
    CALL print_digit
    LD BC, -10
    LD DE, -1
    CALL print_digit
    LD A, L
    ADD A, '0'         ; Convert to ASCII
    RST 16             ; Print last digit
    RET

print_digit:
    LD A, '0'-1
print_digit_loop:
    INC A
    ADD HL, BC         ; Subtract power of 10
    JR C, print_digit_loop
    ADD HL, DE         ; Add back one power of 10
    RST 16             ; Print digit
    RET

print_i8_decimal:
    BIT 7, A           ; Check sign bit
    JR Z, print_u8_decimal
    PUSH AF
    LD A, '-'          ; Print minus sign
    RST 16
    POP AF
    NEG                ; Make positive
    JR print_u8_decimal

print_i16_decimal:
    BIT 7, H           ; Check sign bit
    JR Z, print_u16_decimal
    PUSH HL
    LD A, '-'          ; Print minus sign
    RST 16
    POP HL
    LD A, H            ; Negate HL
    CPL
    LD H, A
    LD A, L
    CPL
    LD L, A
    INC HL
    JR print_u16_decimal

print_bool:
    OR A               ; Test if A is zero
    JR NZ, print_true
    LD HL, bool_false_str
    JR print_string
print_true:
    LD HL, bool_true_str
    JR print_string

bool_true_str:
    DB 4, "true"      ; Length + data
bool_false_str:
    DB 5, "false"     ; Length + data


    END main
